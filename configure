#/bin/sh
# This configure script written by Brian Callahan <bcallah@devio.us>
# and released into the Public Domain.

# Figure out C compiler.
# We can probably assume gcc is available, so it's the failsafe.
printf "Checking for C compiler... "
if [ "x$CC" != "x" ] ; then
  cc="$CC"
else
  /usr/bin/which cc > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    cc="cc"
  else
    /usr/bin/which clang > /dev/null 2>&1
    if [ $? -eq 0 ] ; then
      cc="clang"
    else
      /usr/bin/which gcc > /dev/null 2>&1
      if [ $? -eq 0 ] ; then
	cc="gcc"
      else
	echo "not found"
	echo "Please manually set your C compiler with the CC env variable."
	exit 1
      fi
    fi
  fi
fi
echo "$cc"

printf "Checking for yacc... "

/usr/bin/which yacc > /dev/null 2>&1

if [ $? -eq 0 ] ; then
  echo "yes"
  yaccoroyacc=oyacc
  fix=oyyfix
else
  echo "no"
  yaccoroyacc=yacc
  fix=yyfix
fi

printf "Checking for asprintf... "

cat << EOF > /tmp/checkasprintf.c
/* This file generated by oyacc configure script.  */

#include <stdio.h>

int
main(void)
{
	char *tmp = "y";

	(void) asprintf(NULL, "%s\n", tmp);

	return 0;
}
EOF

$cc -o /tmp/checkasprintf /tmp/checkasprintf.c > /dev/null 2>&1

if [ $? -ne 0 ] ; then
  echo "no"
  cppasprintf="-DNEED_ASPRINTF"
else
  echo "yes"
fi

rm -f /tmp/checkasprintf /tmp/checkasprintf.c checkasprintf.o

printf "Checking for reallocarray... "

cat << EOF > /tmp/checkreallocarray.c
/* This file generated by oyacc configure script.  */

#include <stdlib.h>

int
main(void)
{
	char *tmp;

	tmp = reallocarray(NULL, 1, 1);

	return 0;
}
EOF

$cc -o /tmp/checkreallocarray /tmp/checkreallocarray.c > /dev/null 2>&1

if [ $? -ne 0 ] ; then
  echo "no"
  cppreallocarray="-DNEED_REALLOCARRAY"
else
  echo "yes"
fi

rm -f /tmp/checkreallocarray /tmp/checkreallocarray.c checkreallocarray.o

printf "Checking for strlcpy... "

cat << EOF > /tmp/checkstrlcpy.c
/* This file generated by oyacc configure script.  */

#include <string.h>

int
main(void)
{
	(void) strlcpy(NULL, "yacc", 4);

	return 0;
}
EOF

$cc -o /tmp/checkstrlcpy /tmp/checkstrlcpy.c > /dev/null 2>&1

if [ $? -ne 0 ] ; then
  echo "no"
  cppstrlcpy="-DNEED_STRLCPY"
else
  echo "yes"
fi

rm -f /tmp/checkstrlcpy /tmp/checkstrlcpy.c checkstrlcpy.o

printf "Checking for __progname... "

cat << EOF > /tmp/checkprogname.c
/* This file generated by oyacc configure script.  */

#include <stdio.h>

extern char *__progname;

int
main(void)
{
	(void) fprintf(stderr, "%s\n", __progname);

	return 0;
}
EOF

$cc -o /tmp/checkprogname /tmp/checkprogname.c > /dev/null 2>&1

if [ $? -ne 0 ] ; then
  echo "no"
  cppprogname="-DNEED_PROGNAME"
else
  echo "yes"
fi

rm -f /tmp/checkprogname /tmp/checkprogname.c checkprogname.o

echo ""
echo "Program will be installed as $yaccoroyacc."
echo "Now type 'make' to build."

os=`uname -s`
if [ "x$os" = "xOpenBSD" ] ; then
  cflags="-O2 -pipe -Wall"
elif [ "x$os" = "xBitrig" ] ; then
  cflags="-O2 -pipe -Wall"
elif [ "x$os" = "xFreeBSD" ] ; then
  cflags="-O2 -pipe -Wall -D__dead=\"__dead2\""
elif [ "x$os" = "xNetBSD" ] ; then
  cflags="-O2 -pipe -Wall"
elif [ "x$os" = "xDragonFly" ] ; then
  cflags="-O2 -pipe -Wall -D__dead=\"__dead2\""
elif [ "x$os" = "xDarwin" ] ; then
  cflags="-O2 -pipe -Wall -D__dead=\"__attribute__((__noreturn__))\""
elif [ "x$os" = "xLinux" ] ; then
  cflags="-O2 -pipe -Wall -D_GNU_SOURCE -D__dead=\"__attribute__((__noreturn__))\""
elif [ "x$os" = "xSunOS" ] ; then
  if [ "x$CC" = "xgcc" ] ; then
    cflags="-O2 -pipe -D__dead=\"\""
  else
    cflags="-xO2 -D__dead=\"\""
  fi
elif [ "x$os" = "xAIX" ] ; then
  if [ "x$CC" = "xgcc" ] ; then
    cflags="-O2 -pipe -D__dead=\"\""
  else
    cflags="-O3 -qstrict -qro -qroconst -D__dead=\"\""
  fi
else
  os=`uname -s | cut -c 1-6`
  if [ "x$os" = "xCYGWIN" ] ; then
    cflags="-O2 -pipe -Wall -D_GNU_SOURCE -D__dead=\"__attribute__((__noreturn__))\""
  else
    echo "Unknown operating system, please add the OS to this script"
    echo "and submit a pull request to https://github.com/ibara/yacc"
    exit 1
  fi
fi

cat << EOF > Makefile
# This Makefile was generated by configure.

CC=	$cc
CFLAGS=	$cflags $cppreallocarray $cppstrlcpy $cppasprintf $cppprogname

PREFIX=	/usr/local
BINDIR=	\${PREFIX}/bin
MANDIR=	\${PREFIX}/man/man1

PROG=	$yaccoroyacc
OBJS=	closure.o error.o lalr.o lr0.o main.o mkpar.o output.o reader.o \\
	skeleton.o symtab.o verbose.o warshall.o portable.o

all: \${OBJS}
	\${CC} \${LDFLAGS} -o \${PROG} \${OBJS}

install: all
	install -d \${DESTDIR}\${BINDIR}
	install -d \${DESTDIR}\${MANDIR}
	install -m 555 \${PROG} \${DESTDIR}\${BINDIR}
	install -m 555 yyfix.sh \${DESTDIR}\${BINDIR}/$fix
	install -m 444 yacc.1 \${DESTDIR}\${MANDIR}/\${PROG}.1
	install -m 444 yyfix.1 \${DESTDIR}\${MANDIR}/$fix.1

test:
	@echo "No tests"

clean:
	rm -f \${PROG} \${OBJS}

distclean: clean
	rm -f Makefile
EOF
